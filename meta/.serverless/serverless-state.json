{
  "service": {
    "service": "aida-0-x-meta",
    "serviceObject": {
      "name": "aida-0-x-meta"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs14.x",
      "projectName": "aida",
      "frontendDirectoryName": "aidafront",
      "stage": "develop",
      "region": "us-east-1",
      "environment": {
        "PROJECT_NAME": "aida",
        "STAGE": "develop"
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "lambda:*",
            "cognito:*",
            "cognito-idp:*",
            "apigateway:*",
            "s3:*",
            "cloudfront:*"
          ],
          "Resource": [
            "*"
          ]
        }
      ],
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "UserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aida-0-x-meta-develop-user"
            }
          },
          "PostConfirmationLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aida-0-x-meta-develop-postConfirmation"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "aida-0-x-meta",
                        "develop",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/aida-0-x-meta-develop*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/aida-0-x-meta-develop*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "aida-0-x-meta",
                    "develop",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "UserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/aida-0-x-meta/develop/1676634319445-2023-02-17T11:45:19.445Z/user.zip"
              },
              "Handler": "server/api/users/user.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "aida-0-x-meta-develop-user",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "PROJECT_NAME": "aida",
                  "STAGE": "develop"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UserLogGroup"
            ]
          },
          "PostConfirmationLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/aida-0-x-meta/develop/1676634319445-2023-02-17T11:45:19.445Z/postConfirmation.zip"
              },
              "Handler": "server/cognito_triggers/postConfirmation.trigger",
              "Runtime": "nodejs14.x",
              "FunctionName": "aida-0-x-meta-develop-postConfirmation",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "PROJECT_NAME": "aida",
                  "STAGE": "develop"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "PostConfirmationLogGroup"
            ]
          },
          "PostConfirmationLambdaVersionQNRMsjrGOKzg6c9E5paRYcTKeey8yDXyNM3KFPNWtg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "PostConfirmationLambdaFunction"
              },
              "CodeSha256": "PbuOxN9qGTzJDxuOt0PBLlCMI8UkCW3gKRSd+CzCOtQ="
            }
          },
          "UserLambdaVersionI82m0AjOTRJgimls0nS7aC4prrkAJgAK1lcyx4cZM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UserLambdaFunction"
              },
              "CodeSha256": "ORYVn3ABmCwbgghorvqdXRyxLSG6HPRSWGzPvLWnX2E="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "restApi",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceUser": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "user",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUserOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Max-Age": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                      "method.response.header.Access-Control-Max-Age": "'86400'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUser"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUserGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUser"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "ApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UserLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1676634314685": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "develop"
            },
            "DependsOn": [
              "ApiGatewayMethodUserOptions",
              "ApiGatewayMethodUserGet"
            ]
          },
          "UserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "PostConfirmationCustomCognitoUserPool1": {
            "Type": "Custom::CognitoUserPool",
            "Version": 1,
            "DependsOn": [
              "PostConfirmationLambdaFunction",
              "CustomDashresourceDashexistingDashcupLambdaFunction"
            ],
            "Properties": {
              "ServiceToken": {
                "Fn::GetAtt": [
                  "CustomDashresourceDashexistingDashcupLambdaFunction",
                  "Arn"
                ]
              },
              "FunctionName": "aida-0-x-meta-develop-postConfirmation",
              "UserPoolName": "aida-develop",
              "UserPoolConfigs": [
                {
                  "Trigger": "PostConfirmation"
                }
              ],
              "ForceDeploy": 1676634319498
            }
          },
          "IamRoleCustomResourcesLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "develop",
                        "aida-0-x-meta",
                        "custom-resources-lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Resource": "*",
                        "Action": [
                          "cognito-idp:ListUserPools",
                          "cognito-idp:DescribeUserPool",
                          "cognito-idp:UpdateUserPool"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Resource": {
                          "Fn::Sub": "arn:${AWS::Partition}:lambda:*:*:function:aida-0-x-meta-develop-postConfirmation"
                        },
                        "Action": [
                          "lambda:AddPermission",
                          "lambda:RemovePermission"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Resource": {
                          "Fn::Sub": "arn:${AWS::Partition}:iam::*:role/*"
                        },
                        "Action": [
                          "iam:PassRole"
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "CustomDashresourceDashexistingDashcupLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/aida-0-x-meta/develop/1676634319445-2023-02-17T11:45:19.445Z/custom-resources.zip"
              },
              "FunctionName": "aida-0-x-meta-develop-custom-resource-existing-cup",
              "Handler": "cognito-user-pool/handler.handler",
              "MemorySize": 1024,
              "Runtime": "nodejs16.x",
              "Timeout": 180,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleCustomResourcesLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "IamRoleCustomResourcesLambdaExecution"
            ]
          },
          "userPool": {
            "Type": "AWS::Cognito::UserPool",
            "Properties": {
              "UserPoolName": "aida-develop",
              "UsernameConfiguration": {
                "CaseSensitive": false
              },
              "UserPoolAddOns": {
                "AdvancedSecurityMode": "AUDIT"
              },
              "AutoVerifiedAttributes": [
                "email"
              ],
              "VerificationMessageTemplate": {
                "EmailSubject": "AIDA Verification Code",
                "EmailMessage": "Your verification code is {####}."
              },
              "DeviceConfiguration": {
                "ChallengeRequiredOnNewDevice": true
              },
              "EmailConfiguration": {
                "EmailSendingAccount": "COGNITO_DEFAULT"
              },
              "AdminCreateUserConfig": {
                "AllowAdminCreateUserOnly": false,
                "InviteMessageTemplate": {
                  "EmailSubject": "Your temporary password",
                  "EmailMessage": "Your username is {username} and temporary password is {####}."
                }
              },
              "Schema": [
                {
                  "Name": "email",
                  "AttributeDataType": "String",
                  "Mutable": true,
                  "Required": true
                },
                {
                  "Name": "firstname",
                  "AttributeDataType": "String",
                  "Mutable": true
                },
                {
                  "Name": "lastname",
                  "AttributeDataType": "String",
                  "Mutable": true
                },
                {
                  "Name": "phone",
                  "AttributeDataType": "String",
                  "Mutable": true
                }
              ],
              "Policies": {
                "PasswordPolicy": {
                  "MinimumLength": 8,
                  "RequireNumbers": true,
                  "RequireSymbols": true,
                  "RequireUppercase": true
                }
              }
            }
          },
          "userPoolClient": {
            "Type": "AWS::Cognito::UserPoolClient",
            "Properties": {
              "ClientName": {
                "Fn::Sub": "aida-develop-aidaAppClient"
              },
              "GenerateSecret": false,
              "UserPoolId": {
                "Ref": "userPool"
              },
              "EnableTokenRevocation": true,
              "SupportedIdentityProviders": [
                "COGNITO"
              ],
              "AllowedOAuthFlowsUserPoolClient": true,
              "AllowedOAuthFlows": [
                "code",
                "implicit"
              ],
              "AllowedOAuthScopes": [
                "phone",
                "email",
                "openid",
                "profile",
                "aws.cognito.signin.user.admin"
              ],
              "CallbackURLs": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "https://",
                      {
                        "Fn::GetAtt": [
                          "CloudFrontDistribution",
                          "DomainName"
                        ]
                      },
                      "/welcome"
                    ]
                  ]
                }
              ]
            }
          },
          "UserPoolDomain": {
            "Type": "AWS::Cognito::UserPoolDomain",
            "Properties": {
              "UserPoolId": {
                "Ref": "userPool"
              },
              "Domain": {
                "Fn::Sub": "aida-develop"
              }
            }
          },
          "CognitoUserPoolAdminGroup": {
            "Type": "AWS::Cognito::UserPoolGroup",
            "Properties": {
              "Description": "AIDA admin group",
              "GroupName": {
                "Fn::Sub": "aida-develop-admin-group"
              },
              "UserPoolId": {
                "Ref": "userPool"
              }
            }
          },
          "CognitoUserPoolUserGroup": {
            "Type": "AWS::Cognito::UserPoolGroup",
            "Properties": {
              "Description": "AIDA user group",
              "GroupName": {
                "Fn::Sub": "aida-develop-user-group"
              },
              "UserPoolId": {
                "Ref": "userPool"
              }
            }
          },
          "ApiGatewayAuthorizer": {
            "DependsOn": [
              "ApiGatewayRestApi"
            ],
            "Type": "AWS::ApiGateway::Authorizer",
            "Properties": {
              "Name": "cognito-authorizer",
              "IdentitySource": "method.request.header.Authorization",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "Type": "COGNITO_USER_POOLS",
              "ProviderARNs": [
                {
                  "Fn::GetAtt": [
                    "userPool",
                    "Arn"
                  ]
                }
              ]
            }
          },
          "ReactAppBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketName": {
                "Fn::Sub": "aida-develop-front"
              },
              "AccessControl": "PublicRead",
              "WebsiteConfiguration": {
                "IndexDocument": "index.html",
                "ErrorDocument": "index.html"
              }
            }
          },
          "S3AccessPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ReactAppBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Sid": "PublicReadGetObject",
                    "Effect": "Allow",
                    "Principal": "*",
                    "Action": [
                      "s3:GetObject"
                    ],
                    "Resource": "arn:aws:s3:::aida-develop-front/*"
                  }
                ]
              }
            }
          },
          "CloudFrontDistribution": {
            "Type": "AWS::CloudFront::Distribution",
            "Properties": {
              "DistributionConfig": {
                "Origins": [
                  {
                    "DomainName": "aida-develop-front.s3.amazonaws.com",
                    "Id": "ReactApp",
                    "CustomOriginConfig": {
                      "HTTPPort": 80,
                      "HTTPSPort": 443,
                      "OriginProtocolPolicy": "https-only"
                    }
                  }
                ],
                "Enabled": "true",
                "DefaultRootObject": "index.html",
                "CustomErrorResponses": [
                  {
                    "ErrorCode": 404,
                    "ResponseCode": 200,
                    "ResponsePagePath": "/index.html"
                  }
                ],
                "DefaultCacheBehavior": {
                  "AllowedMethods": [
                    "DELETE",
                    "GET",
                    "HEAD",
                    "OPTIONS",
                    "PATCH",
                    "POST",
                    "PUT"
                  ],
                  "TargetOriginId": "ReactApp",
                  "ForwardedValues": {
                    "QueryString": "false",
                    "Cookies": {
                      "Forward": "none"
                    }
                  },
                  "ViewerProtocolPolicy": "redirect-to-https"
                },
                "ViewerCertificate": {
                  "CloudFrontDefaultCertificate": true
                }
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-aida-0-x-meta-develop-ServerlessDeploymentBucketName"
            }
          },
          "PostConfirmationLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "PostConfirmationLambdaVersionQNRMsjrGOKzg6c9E5paRYcTKeey8yDXyNM3KFPNWtg"
            },
            "Export": {
              "Name": "sls-aida-0-x-meta-develop-PostConfirmationLambdaFunctionQualifiedArn"
            }
          },
          "UserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UserLambdaVersionI82m0AjOTRJgimls0nS7aC4prrkAJgAK1lcyx4cZM"
            },
            "Export": {
              "Name": "sls-aida-0-x-meta-develop-UserLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/develop"
                ]
              ]
            },
            "Export": {
              "Name": "sls-aida-0-x-meta-develop-ServiceEndpoint"
            }
          },
          "UserPoolID": {
            "Description": "Provider Cognito User Pool Id",
            "Value": {
              "Ref": "userPool"
            },
            "Export": {
              "Name": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Fn::Sub": "aida"
                    },
                    "-",
                    {
                      "Fn::Sub": "develop"
                    },
                    "-poolId"
                  ]
                ]
              }
            }
          },
          "AppClientId": {
            "Description": "App Pool Id",
            "Value": {
              "Ref": "userPoolClient"
            }
          },
          "CognitoDomain": {
            "Description": "Cognito Domain",
            "Value": {
              "Fn::Join": [
                ".",
                [
                  {
                    "Ref": "UserPoolDomain"
                  },
                  "auth",
                  {
                    "Fn::Sub": "us-east-1"
                  },
                  "amazoncognito.com"
                ]
              ]
            }
          },
          "Region": {
            "Description": "Cognito Region",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Fn::Sub": "us-east-1"
                  },
                  ""
                ]
              ]
            }
          },
          "UpdateBucketName": {
            "Value": {
              "Ref": "ReactAppBucket"
            }
          },
          "CloudFrontDistributionDomainName": {
            "Description": "The CloudFront Distribution Domain Name",
            "Value": {
              "Fn::GetAtt": [
                "CloudFrontDistribution",
                "DomainName"
              ]
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "webpack": {
        "packager": "npm",
        "packagerOptions": {},
        "webpackConfig": "node_modules/serverless-bundle/src/webpack.config.js",
        "includeModules": {
          "forceExclude": [
            "aws-sdk"
          ],
          "forceInclude": null,
          "packagePath": "package.json"
        },
        "excludeFiles": null,
        "excludeRegex": {},
        "keepOutputDirectory": false
      }
    },
    "plugins": [
      "serverless-bundle"
    ],
    "pluginsData": {},
    "functions": {
      "user": {
        "handler": "server/api/users/user.handler",
        "events": [
          {
            "http": {
              "path": "user",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false,
                "maxAge": 86400
              },
              "authorizer": {
                "type": "COGNITO_USER_POOLS",
                "managedExternally": false,
                "authorizerId": {
                  "Ref": "ApiGatewayAuthorizer"
                },
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "aida-0-x-meta-develop-user",
        "package": {
          "artifact": ".serverless/user.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "UserLambdaVersionI82m0AjOTRJgimls0nS7aC4prrkAJgAK1lcyx4cZM"
      },
      "postConfirmation": {
        "handler": "server/cognito_triggers/postConfirmation.trigger",
        "events": [
          {
            "cognitoUserPool": {
              "pool": "aida-develop",
              "trigger": "PostConfirmation",
              "existing": true,
              "forceDeploy": true
            }
          }
        ],
        "name": "aida-0-x-meta-develop-postConfirmation",
        "package": {
          "artifact": ".serverless/postConfirmation.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "PostConfirmationLambdaVersionQNRMsjrGOKzg6c9E5paRYcTKeey8yDXyNM3KFPNWtg"
      }
    },
    "resources": {
      "Resources": {
        "userPool": {
          "Type": "AWS::Cognito::UserPool",
          "Properties": {
            "UserPoolName": "aida-develop",
            "UsernameConfiguration": {
              "CaseSensitive": false
            },
            "UserPoolAddOns": {
              "AdvancedSecurityMode": "AUDIT"
            },
            "AutoVerifiedAttributes": [
              "email"
            ],
            "VerificationMessageTemplate": {
              "EmailSubject": "AIDA Verification Code",
              "EmailMessage": "Your verification code is {####}."
            },
            "DeviceConfiguration": {
              "ChallengeRequiredOnNewDevice": true
            },
            "EmailConfiguration": {
              "EmailSendingAccount": "COGNITO_DEFAULT"
            },
            "AdminCreateUserConfig": {
              "AllowAdminCreateUserOnly": false,
              "InviteMessageTemplate": {
                "EmailSubject": "Your temporary password",
                "EmailMessage": "Your username is {username} and temporary password is {####}."
              }
            },
            "Schema": [
              {
                "Name": "email",
                "AttributeDataType": "String",
                "Mutable": true,
                "Required": true
              },
              {
                "Name": "firstname",
                "AttributeDataType": "String",
                "Mutable": true
              },
              {
                "Name": "lastname",
                "AttributeDataType": "String",
                "Mutable": true
              },
              {
                "Name": "phone",
                "AttributeDataType": "String",
                "Mutable": true
              }
            ],
            "Policies": {
              "PasswordPolicy": {
                "MinimumLength": 8,
                "RequireNumbers": true,
                "RequireSymbols": true,
                "RequireUppercase": true
              }
            }
          }
        },
        "userPoolClient": {
          "Type": "AWS::Cognito::UserPoolClient",
          "Properties": {
            "ClientName": {
              "Fn::Sub": "aida-develop-aidaAppClient"
            },
            "GenerateSecret": false,
            "UserPoolId": {
              "Ref": "userPool"
            },
            "EnableTokenRevocation": true,
            "SupportedIdentityProviders": [
              "COGNITO"
            ],
            "AllowedOAuthFlowsUserPoolClient": true,
            "AllowedOAuthFlows": [
              "code",
              "implicit"
            ],
            "AllowedOAuthScopes": [
              "phone",
              "email",
              "openid",
              "profile",
              "aws.cognito.signin.user.admin"
            ],
            "CallbackURLs": [
              {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Fn::GetAtt": [
                        "CloudFrontDistribution",
                        "DomainName"
                      ]
                    },
                    "/welcome"
                  ]
                ]
              }
            ]
          }
        },
        "UserPoolDomain": {
          "Type": "AWS::Cognito::UserPoolDomain",
          "Properties": {
            "UserPoolId": {
              "Ref": "userPool"
            },
            "Domain": {
              "Fn::Sub": "aida-develop"
            }
          }
        },
        "CognitoUserPoolAdminGroup": {
          "Type": "AWS::Cognito::UserPoolGroup",
          "Properties": {
            "Description": "AIDA admin group",
            "GroupName": {
              "Fn::Sub": "aida-develop-admin-group"
            },
            "UserPoolId": {
              "Ref": "userPool"
            }
          }
        },
        "CognitoUserPoolUserGroup": {
          "Type": "AWS::Cognito::UserPoolGroup",
          "Properties": {
            "Description": "AIDA user group",
            "GroupName": {
              "Fn::Sub": "aida-develop-user-group"
            },
            "UserPoolId": {
              "Ref": "userPool"
            }
          }
        },
        "ApiGatewayRestApi": {
          "Type": "AWS::ApiGateway::RestApi",
          "Properties": {
            "Name": "restApi"
          }
        },
        "ApiGatewayAuthorizer": {
          "DependsOn": [
            "ApiGatewayRestApi"
          ],
          "Type": "AWS::ApiGateway::Authorizer",
          "Properties": {
            "Name": "cognito-authorizer",
            "IdentitySource": "method.request.header.Authorization",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "Type": "COGNITO_USER_POOLS",
            "ProviderARNs": [
              {
                "Fn::GetAtt": [
                  "userPool",
                  "Arn"
                ]
              }
            ]
          }
        },
        "ReactAppBucket": {
          "Type": "AWS::S3::Bucket",
          "Properties": {
            "BucketName": {
              "Fn::Sub": "aida-develop-front"
            },
            "AccessControl": "PublicRead",
            "WebsiteConfiguration": {
              "IndexDocument": "index.html",
              "ErrorDocument": "index.html"
            }
          }
        },
        "S3AccessPolicy": {
          "Type": "AWS::S3::BucketPolicy",
          "Properties": {
            "Bucket": {
              "Ref": "ReactAppBucket"
            },
            "PolicyDocument": {
              "Statement": [
                {
                  "Sid": "PublicReadGetObject",
                  "Effect": "Allow",
                  "Principal": "*",
                  "Action": [
                    "s3:GetObject"
                  ],
                  "Resource": "arn:aws:s3:::aida-develop-front/*"
                }
              ]
            }
          }
        },
        "CloudFrontDistribution": {
          "Type": "AWS::CloudFront::Distribution",
          "Properties": {
            "DistributionConfig": {
              "Origins": [
                {
                  "DomainName": "aida-develop-front.s3.amazonaws.com",
                  "Id": "ReactApp",
                  "CustomOriginConfig": {
                    "HTTPPort": 80,
                    "HTTPSPort": 443,
                    "OriginProtocolPolicy": "https-only"
                  }
                }
              ],
              "Enabled": "true",
              "DefaultRootObject": "index.html",
              "CustomErrorResponses": [
                {
                  "ErrorCode": 404,
                  "ResponseCode": 200,
                  "ResponsePagePath": "/index.html"
                }
              ],
              "DefaultCacheBehavior": {
                "AllowedMethods": [
                  "DELETE",
                  "GET",
                  "HEAD",
                  "OPTIONS",
                  "PATCH",
                  "POST",
                  "PUT"
                ],
                "TargetOriginId": "ReactApp",
                "ForwardedValues": {
                  "QueryString": "false",
                  "Cookies": {
                    "Forward": "none"
                  }
                },
                "ViewerProtocolPolicy": "redirect-to-https"
              },
              "ViewerCertificate": {
                "CloudFrontDefaultCertificate": true
              }
            }
          }
        }
      },
      "Outputs": {
        "UserPoolID": {
          "Description": "Provider Cognito User Pool Id",
          "Value": {
            "Ref": "userPool"
          },
          "Export": {
            "Name": {
              "Fn::Join": [
                "",
                [
                  {
                    "Fn::Sub": "aida"
                  },
                  "-",
                  {
                    "Fn::Sub": "develop"
                  },
                  "-poolId"
                ]
              ]
            }
          }
        },
        "AppClientId": {
          "Description": "App Pool Id",
          "Value": {
            "Ref": "userPoolClient"
          }
        },
        "CognitoDomain": {
          "Description": "Cognito Domain",
          "Value": {
            "Fn::Join": [
              ".",
              [
                {
                  "Ref": "UserPoolDomain"
                },
                "auth",
                {
                  "Fn::Sub": "us-east-1"
                },
                "amazoncognito.com"
              ]
            ]
          }
        },
        "Region": {
          "Description": "Cognito Region",
          "Value": {
            "Fn::Join": [
              "",
              [
                {
                  "Fn::Sub": "us-east-1"
                },
                ""
              ]
            ]
          }
        },
        "UpdateBucketName": {
          "Value": {
            "Ref": "ReactAppBucket"
          }
        },
        "CloudFrontDistributionDomainName": {
          "Description": "The CloudFront Distribution Domain Name",
          "Value": {
            "Fn::GetAtt": [
              "CloudFrontDistribution",
              "DomainName"
            ]
          }
        }
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "aida-0-x-meta",
      "package": {
        "individually": true,
        "exclude": [
          "aidafront/node_modules/**",
          "aidafront/public/**",
          "aidafront/src/**",
          "aidafront/package.json",
          "aidafront/package-lock.json",
          "aidafront/README.md",
          "node_modules/**",
          "amplify/**",
          "public/**",
          "src/**",
          "yarn.lock"
        ],
        "artifactsS3KeyDirname": "serverless/aida-0-x-meta/develop/code-artifacts",
        "artifactDirectoryName": "serverless/aida-0-x-meta/develop/1676634319445-2023-02-17T11:45:19.445Z"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false
  },
  "package": {
    "individually": true,
    "artifactDirectoryName": "serverless/aida-0-x-meta/develop/1676634319445-2023-02-17T11:45:19.445Z",
    "artifact": ""
  }
}